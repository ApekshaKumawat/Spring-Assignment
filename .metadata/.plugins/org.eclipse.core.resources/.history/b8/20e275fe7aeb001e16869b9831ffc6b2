package SpringAssignment.LogExecutionTime;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.springframework.stereotype.Component;

import com.sun.org.slf4j.internal.LoggerFactory;


@Aspect
@Component
public class ExecutionTimeAspect {
	
	@Pointcut(value="execution(* SpringAssignment.LogExecutionTime.*.*.*(..))")
	public void pointcut() {
		
	}
	
	
	@Around("pointcut()")
	  public Object logExecutionTime(ProceedingJoinPoint joinPoint) throws Throwable {
//		
//		Logger log = (Logger) LoggerFactory.getLogger(ExecutionTimeAspect.class);
//		
//		String methodName=joinPoint.getSignature().getName();
//		String className= joinPoint.getTarget().getClass().toString();
//		Object[] array = joinPoint.getArgs();
//		
//		log.info( className+ " , "+ methodName+"()"+" arguments : "+ array );
//		
//		Object object = joinPoint.proceed();
//		
//	  return object;
	  
	
			long startTime=System.currentTimeMillis();
			Object result=joinPoint.proceed();
			long endTime=System.currentTimeMillis();
			long executionTime=endTime - startTime;
			
			System.out.println(joinPoint.getSignature()+ " executed in "+executionTime+" ms");
			return result;
		
	     
	}
	
}
